/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package groupproject545;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import oracle.jdbc.OracleStatement;

/**
 *
 * @author Ethan_2
 */
public class IngredientsGUI extends javax.swing.JPanel {

    Connection conn = null;
    OracleStatement stmt = null;
    public String oldName = null;  // The old name of a food item (will be used when changing food ingredients names)
    public Ingredients ingredientClass = new Ingredients();
    public List<Ingredients> ingredientsList = new ArrayList<Ingredients>();

    /**
     * Creates new form IngredientsGUI
     */
    public IngredientsGUI(JFrame frame) {

        initComponents();

        WindowListener exitListener = new WindowAdapter() {  // Create custom closing event.
            public void windowClosing(WindowEvent e) {
                // Show the meal plans form.
                JFrame welcomeScreen = new JFrame("Welcome");

                // Maximize the size of the jframe.
                //welcomeScreen.setExtendedState(JFrame.MAXIMIZED_BOTH);
                welcomeScreen.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  // Exits the program after the JFrame is closed by the user.
                welcomeScreen.add(new WelcomeScreenGUI());
                welcomeScreen.pack();
                welcomeScreen.setLocationRelativeTo(null);
                welcomeScreen.setVisible(true);
            }
        };

        frame.addWindowListener(exitListener);  // Add the custom designed listener.

        frame.add(this);  // Pass the current instance of the IngredientsGUI class to the frame.
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        // Hide the adding a new ingredient text field and label (until the user wants to add an ingredient)
        ingredientNameTextField.setVisible(false);
        ingredientNameLabel.setVisible(false);

        // Put the ingredients in the combo box.
        populateComboBox();
    }

    private void populateComboBox() {
        ingredientsList = ingredientClass.getAllIngredients();
        ingredientsComboBox.removeAllItems(); // Remove anything that was already in the combo box.
        if (ingredientsList.size() > 0) {
            for (int i = 0; i < ingredientsList.size(); i++) {
                ingredientsComboBox.addItem(ingredientsList.get(i).getName());
            }
        } else {
            ingredientInfoPanel.setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        button1 = new java.awt.Button();
        addNewIngredientButton = new javax.swing.JButton();
        ingredientInfoPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        inStockCheckBox = new java.awt.Checkbox();
        submitChangesButton = new javax.swing.JButton();
        ingredientNameTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        nutritionFactsTextArea = new javax.swing.JTextArea();
        foodGroupTextField = new javax.swing.JTextField();
        ingredientNameLabel = new javax.swing.JLabel();
        deleteIngredientButton = new javax.swing.JButton();
        ingredientsComboBox = new javax.swing.JComboBox<>();

        button1.setLabel("button1");

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        addNewIngredientButton.setText("Add New Ingredient");
        addNewIngredientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewIngredientButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Nutrition facts:");

        jLabel2.setText("Food group:");

        inStockCheckBox.setLabel("Item in stock");
        inStockCheckBox.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inStockCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inStockCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        submitChangesButton.setText("Edit Ingredient");
        submitChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitChangesButtonActionPerformed(evt);
            }
        });

        nutritionFactsTextArea.setEditable(false);
        nutritionFactsTextArea.setColumns(20);
        nutritionFactsTextArea.setRows(5);
        jScrollPane1.setViewportView(nutritionFactsTextArea);

        foodGroupTextField.setEditable(false);

        ingredientNameLabel.setText("Ingredient Name:");

        deleteIngredientButton.setText("Delete Ingredient");
        deleteIngredientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteIngredientButtonActionPerformed(evt);
            }
        });

        ingredientsComboBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ingredientsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingredientsComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ingredientInfoPanelLayout = new javax.swing.GroupLayout(ingredientInfoPanel);
        ingredientInfoPanel.setLayout(ingredientInfoPanelLayout);
        ingredientInfoPanelLayout.setHorizontalGroup(
            ingredientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ingredientInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ingredientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ingredientInfoPanelLayout.createSequentialGroup()
                        .addGroup(ingredientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ingredientInfoPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(87, 87, 87))
                            .addGroup(ingredientInfoPanelLayout.createSequentialGroup()
                                .addComponent(ingredientsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(ingredientInfoPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(ingredientNameLabel)
                                .addGap(18, 18, 18)
                                .addComponent(ingredientNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(foodGroupTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(ingredientInfoPanelLayout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(submitChangesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteIngredientButton)
                        .addGap(41, 41, 41))))
        );
        ingredientInfoPanelLayout.setVerticalGroup(
            ingredientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ingredientInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ingredientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ingredientInfoPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addGroup(ingredientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(foodGroupTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(ingredientNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ingredientNameLabel)))
                    .addComponent(ingredientsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ingredientInfoPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel1)))
                .addGap(36, 36, 36)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(ingredientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitChangesButton)
                    .addComponent(deleteIngredientButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(85, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(addNewIngredientButton)
                        .addGap(227, 227, 227))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ingredientInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ingredientInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addNewIngredientButton)
                .addGap(40, 40, 40))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ingredientsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingredientsComboBoxActionPerformed
        int pickedIndex = ingredientsComboBox.getSelectedIndex();
        // Want to populate the information about the ingredient.
        foodGroupTextField.setText(ingredientsList.get(pickedIndex).getFoodGroup());
        nutritionFactsTextArea.setText(ingredientsList.get(pickedIndex).getNutritionFacts());
        if (ingredientsList.get(pickedIndex).isInStock()) {  // The ingredient is in stock.
            inStockCheckBox.setState(true);
        } else {  // INgredient out of stock.
            inStockCheckBox.setState(false);
        }
    }//GEN-LAST:event_ingredientsComboBoxActionPerformed

    private boolean ingredientIsNotEmpty(String ingredientName) {
        // Make sure the ingredient's name is not empty.
        if (ingredientName == null || ingredientName.equals("")) {
            JOptionPane.showMessageDialog(this,
                    "The ingredient name is empty.",
                    "Ingredient Not Added",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    private boolean ingredientDoesNotAlreadyExist(boolean editingMode, String ingredientName) {
        // Check if the ingredient is already in the list.
        int selectedIngredient = ingredientsComboBox.getSelectedIndex();
        for (int i = 0; i < ingredientsList.size(); i++) {
            if (editingMode && i == selectedIngredient) {  // Don't want this method throwing an error because user isn't changing the ingredient's name (could be changing it's nutrition facts, for example)
                continue;
            }
            if (ingredientsList.get(i).getName().equals(ingredientName)) {
                JOptionPane.showMessageDialog(this,
                        "The ingredient already exists.",
                        "Ingredient Not Added",
                        JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        // Passed all the checks - return true so the ingredient can be submitted to the database.
        return true;
    }

    private void submitChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitChangesButtonActionPerformed
        if (submitChangesButton.getText().equals("Edit Ingredient")) {  // Change to "Submit Changes"

            submitChangesButton.setText("Submit Changes");
            deleteIngredientButton.setText("Cancel");
            addNewIngredientButton.setVisible(false);
            // Allow editing of input elements.
            inStockCheckBox.setEnabled(true);
            foodGroupTextField.setEditable(true);
            nutritionFactsTextArea.setEditable(true);
            ingredientNameLabel.setVisible(true);
            ingredientNameTextField.setVisible(true);
            // Place the selected ingredient's name into the text box.
            ingredientNameTextField.setText((String) ingredientsComboBox.getSelectedItem());
            oldName = ingredientNameTextField.getText();  // Store the item's old name.
            ingredientsComboBox.setVisible(false);
        } else // Change to "Edit Ingredient".
        if (ingredientIsNotEmpty(ingredientNameTextField.getText()) && ingredientDoesNotAlreadyExist(true, ingredientNameTextField.getText())) {  // Before submitting changes to the database, validate the ingredient (make sure it's name is not null and that there is not already an ingredient with that name).
            // Capture modifications before removing the item (remember: removing items from combo box will cause the ingredientsComboBoxActionPerformed method to be called, as a new item will automatically be selected)
            String name = ingredientNameTextField.getText();
            String foodGroup = foodGroupTextField.getText();
            boolean inStock = inStockCheckBox.getState();
            String nutritionFacts = nutritionFactsTextArea.getText();
            Ingredients ingredient = new Ingredients(name, foodGroup, inStock, nutritionFacts);

            String oldName = ingredientsComboBox.getSelectedItem().toString();
            if (oldName.equals(name)) {  // Old and new names are equal. Don't try inserting into Ingredients and CallsFor tables.
                updateIngredientsNoNameChange(name, foodGroup, inStock, nutritionFacts);
            } else {  // Ingredient name has been changed.
                updateIngredientsNameChange(name, foodGroup, inStock, nutritionFacts);
            }

            ingredientsList.remove(ingredientsComboBox.getSelectedIndex());  // Remove the item from the combo box and list (will add the modified item shortly)
            ingredientsComboBox.removeItemAt(ingredientsComboBox.getSelectedIndex());

            submitChangesButton.setText("Edit Ingredient");
            addNewIngredientButton.setVisible(true);
            // Prevent editing of ingredients.
            inStockCheckBox.setEnabled(false);
            foodGroupTextField.setEditable(false);
            nutritionFactsTextArea.setEditable(false);

            ingredientNameLabel.setVisible(false);
            ingredientNameTextField.setVisible(false);
            ingredientsComboBox.setVisible(true);
            deleteIngredientButton.setText("Delete Ingredient");

            // Place modified item in the list and combo box.
            ingredientsList.add(0, ingredient);
            ingredientsComboBox.insertItemAt(name, 0);

            // Select the edited item.
            ingredientsComboBox.setSelectedIndex(0);
        }
    }//GEN-LAST:event_submitChangesButtonActionPerformed
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed

    }//GEN-LAST:event_formKeyPressed

    private void addNewIngredientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewIngredientButtonActionPerformed
        ingredientInfoPanel.setVisible(true);
        if (addNewIngredientButton.getText().equals("Add New Ingredient")) {  // User wants to add a new ingredient. Hide some elements.
            addNewIngredientButton.setText("Submit New Ingredient");

            // null out text in nutrition facts field and food group field.
            nutritionFactsTextArea.setText("");
            foodGroupTextField.setText("");

            ingredientsComboBox.setVisible(false);
            submitChangesButton.setVisible(false);
            deleteIngredientButton.setText("Cancel");
            nutritionFactsTextArea.setEditable(true);
            ingredientNameTextField.setVisible(true);
            ingredientNameLabel.setVisible(true);
            foodGroupTextField.setEditable(true);
            inStockCheckBox.setEnabled(true);
        } else // Do opposite of if condition. Try to add ingredient to screen and database.
        {
            if (ingredientIsNotEmpty(ingredientNameTextField.getText()) && ingredientDoesNotAlreadyExist(false, ingredientNameTextField.getText())) {  // Before submitting changes to the database, validate the ingredient (make sure it's name is not null and that there is not already an ingredient with that name).            
                String name = ingredientNameTextField.getText();
                String foodGroup = foodGroupTextField.getText();
                boolean inStock = inStockCheckBox.getState();
                String nutritionFacts = nutritionFactsTextArea.getText();
                Ingredients ingredient = new Ingredients(name, foodGroup, inStock, nutritionFacts);

                // Insert the new ingredient into the db.
                insertIntoIngredients(name, foodGroup, inStock, nutritionFacts);

                // Place new item in the list and combo box.
                ingredientsList.add(0, ingredient);
                ingredientsComboBox.insertItemAt(name, 0);

                // Select the new item.
                ingredientsComboBox.setSelectedIndex(0);

                addNewIngredientButton.setText("Add New Ingredient");
                foodGroupTextField.setEditable(false);
                inStockCheckBox.setEnabled(false);
                ingredientsComboBox.setVisible(true);
                submitChangesButton.setVisible(true);
                deleteIngredientButton.setText("Delete Ingredient");
                nutritionFactsTextArea.setEditable(false);
                ingredientNameTextField.setVisible(false);
                ingredientNameLabel.setVisible(false);
                deleteIngredientButton.setVisible(true);
                submitChangesButton.setVisible(true);
            }
        }
        // null out name text field (so this ingredient's name won't appear there later)
        ingredientNameTextField.setText("");
    }//GEN-LAST:event_addNewIngredientButtonActionPerformed

    private void deleteIngredientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteIngredientButtonActionPerformed
        submitChangesButton.setText("Edit Ingredient");
        if (deleteIngredientButton.getText().equals("Cancel")) {  //Canceling changes/addition of new ingredient.
            if (ingredientsList.size() == 0) {  // hide information about ingredients, if there are none
                ingredientInfoPanel.setVisible(false);
            }
            addNewIngredientButton.setVisible(true);
            // Was in adding a new ingredient mode. Go back to viewing ingredient mode.
            addNewIngredientButton.setText("Add New Ingredient");
            foodGroupTextField.setEditable(false);
            inStockCheckBox.setEnabled(false);
            ingredientsComboBox.setVisible(true);
            submitChangesButton.setVisible(true);
            deleteIngredientButton.setText("Delete Ingredient");
            nutritionFactsTextArea.setEditable(false);
            ingredientNameTextField.setVisible(false);
            ingredientNameLabel.setVisible(false);

            // Select first ingredient, if there's anything to pick.
            if (ingredientsComboBox.getItemCount() > 0) {
                ingredientsComboBox.setSelectedIndex(0);
            }
        } else if (JOptionPane.showConfirmDialog(null, "Are you sure you would like to delete ingredient?", "Confirm",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            // yes option
            // Remove ingredient from screen and database.
            // Delete from db.
            deleteFromIngredients(ingredientsComboBox.getSelectedItem().toString());

            ingredientsComboBox.removeItemAt(ingredientsComboBox.getSelectedIndex());
            if (ingredientsComboBox.getItemCount() == 0) {  // NOthing to delete/edit.
                deleteIngredientButton.setVisible(false);
                submitChangesButton.setVisible(false);
            }

        }
    }//GEN-LAST:event_deleteIngredientButtonActionPerformed

    private void updateIngredientsNameChange(String name, String foodGroup, boolean inStock, String nutritionFacts) {
        // Update the database.
        try {

            String inStockStr = "N";
            if (inStock) {
                inStockStr = "Y";
            }
            String sqlUpdateStmt = "update INGREDIENTS set name = '" + name.replace("'", "''") + "', "
                    + " foodGroup = '" + foodGroup.replace("'", "''") + "', inStock = '" + inStockStr
                    + "', nutritionFacts = '" + nutritionFacts.replace("'", "''")
                    + "' where name = '" + oldName.replace("'", "''") + "'";

            conn = ConnectDb.setupConnection();
            stmt = (OracleStatement) conn.createStatement();
            stmt.executeUpdate(sqlUpdateStmt);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);  // Show the exception message.
        } finally {
            try {  // Try closing the connection and the statement.
                conn.close();
                stmt.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);  // Show the exception message.}
            }
        }
    }

    private void updateIngredientsNoNameChange(String name, String foodGroup, boolean inStock, String nutritionFacts) {
        // Update the database.
        try {

            String inStockStr = "N";
            if (inStock) {
                inStockStr = "Y";
            }
            String sqlUpdateStmt = "update INGREDIENTS set "
                    + " foodGroup = '" + foodGroup.replace("'", "''") + "', inStock = '" + inStockStr
                    + "', nutritionFacts = '" + nutritionFacts.replace("'", "''")
                    + "' where name = '" + name.replace("'", "''") + "'";

            conn = ConnectDb.setupConnection();
            stmt = (OracleStatement) conn.createStatement();
            stmt.executeUpdate(sqlUpdateStmt);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);  // Show the exception message.
        } finally {
            try {  // Try closing the connection and the statement.
                conn.close();
                stmt.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);  // Show the exception message.}
            }
        }
    }

    private void insertIntoIngredients(String name, String foodGroup, boolean inStock, String nutritionFacts) {
        // Insert the item into the database.
        try {
            // Turn the boolean inStock into a string so it can be inserted into the database.
            String inStockStr = "N";
            if (inStock) {
                inStockStr = "Y";
            }
            String sqlInsertStmt = "insert into INGREDIENTS values ('" + name.replace("'", "''") + "', '" + foodGroup.replace("'", "''") + "', '" + inStockStr + "', '" + nutritionFacts.replace("'", "''") + "')";

            conn = ConnectDb.setupConnection();
            stmt = (OracleStatement) conn.createStatement();
            stmt.execute(sqlInsertStmt);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);  // Show the exception message.
        } finally {
            try {  // Try closing the connection and the statement.
                conn.close();
                stmt.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);  // Show the exception message.}
            }
        }
    }

    private void deleteFromIngredients(String ingredient) {
        try {
            String sqlDeleteStmt = "delete from INGREDIENTS where name = '" + ingredient.replace("'", "''") + "'";

            conn = ConnectDb.setupConnection();
            stmt = (OracleStatement) conn.createStatement();
            stmt.execute(sqlDeleteStmt);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);  // Show the exception message.
        } finally {
            try {  // Try closing the connection and the statement.
                conn.close();
                stmt.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);  // Show the exception message.}
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewIngredientButton;
    private java.awt.Button button1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton deleteIngredientButton;
    private javax.swing.JTextField foodGroupTextField;
    private java.awt.Checkbox inStockCheckBox;
    private javax.swing.JPanel ingredientInfoPanel;
    private javax.swing.JLabel ingredientNameLabel;
    private javax.swing.JTextField ingredientNameTextField;
    private javax.swing.JComboBox<String> ingredientsComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea nutritionFactsTextArea;
    private javax.swing.JButton submitChangesButton;
    // End of variables declaration//GEN-END:variables

}
