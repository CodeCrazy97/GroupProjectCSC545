/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package groupproject545;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

/**
 *
 * @author Ethan_2
 */
public class IngredientsGUI extends javax.swing.JPanel {

    public Ingredients ingredientClass = new Ingredients();
    public List<Ingredients> ingredientsList = new ArrayList<Ingredients>();

    /**
     * Creates new form IngredientsGUI
     */
    public IngredientsGUI(JFrame frame) {

        initComponents();

        WindowListener exitListener = new WindowAdapter() {  // Create custom closing event.
            public void windowClosing(WindowEvent e) {
                // Show the meal plans form.
                JFrame welcomeScreen = new JFrame("Welcome");

                // Maximize the size of the jframe.
                //welcomeScreen.setExtendedState(JFrame.MAXIMIZED_BOTH);
                welcomeScreen.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  // Exits the program after the JFrame is closed by the user.
                welcomeScreen.add(new WelcomeScreenGUI());
                welcomeScreen.pack();
                welcomeScreen.setLocationRelativeTo(null);
                welcomeScreen.setVisible(true);
            }
        };

        frame.addWindowListener(exitListener);  // Add the custom designed listener.

        frame.add(this);  // Pass the current instance of the IngredientsGUI class to the frame.
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        // Hide the adding a new ingredient text field and label (until the user wants to add an ingredient)
        ingredientNameTextField.setVisible(false);
        ingredientNameLabel.setVisible(false);

        // Put the ingredients in the combo box.
        populateComboBox();
    }

    private void populateComboBox() {
        ingredientsList = ingredientClass.getInStockIngredients();
        ingredientsComboBox.removeAllItems(); // Remove anything that was already in the combo box.
        for (int i = 0; i < ingredientsList.size(); i++) {
            ingredientsComboBox.addItem(ingredientsList.get(i).getName());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        button1 = new java.awt.Button();
        ingredientsComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        inStockCheckBox = new java.awt.Checkbox();
        foodGroupTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        nutritionFactsTextArea = new javax.swing.JTextArea();
        submitChangesButton = new javax.swing.JButton();
        deleteIngredientButton = new javax.swing.JButton();
        addNewIngredientButton = new javax.swing.JButton();
        ingredientNameTextField = new javax.swing.JTextField();
        ingredientNameLabel = new javax.swing.JLabel();

        button1.setLabel("button1");

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        ingredientsComboBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ingredientsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ingredientsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingredientsComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Nutrition facts:");

        jLabel2.setText("Food group:");

        inStockCheckBox.setEnabled(false);
        inStockCheckBox.setLabel("Item in stock");

        foodGroupTextField.setEditable(false);

        nutritionFactsTextArea.setEditable(false);
        nutritionFactsTextArea.setColumns(20);
        nutritionFactsTextArea.setRows(5);
        jScrollPane1.setViewportView(nutritionFactsTextArea);

        submitChangesButton.setText("Edit Ingredient");
        submitChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitChangesButtonActionPerformed(evt);
            }
        });

        deleteIngredientButton.setText("Delete Ingredient");
        deleteIngredientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteIngredientButtonActionPerformed(evt);
            }
        });

        addNewIngredientButton.setText("Add New Ingredient");
        addNewIngredientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewIngredientButtonActionPerformed(evt);
            }
        });

        ingredientNameLabel.setText("Ingredient Name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addNewIngredientButton)
                .addGap(34, 34, 34)
                .addComponent(submitChangesButton)
                .addGap(35, 35, 35)
                .addComponent(deleteIngredientButton)
                .addGap(129, 129, 129))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(inStockCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(101, 101, 101))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ingredientsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(ingredientNameLabel)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ingredientNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(foodGroupTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(217, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(foodGroupTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(ingredientNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ingredientNameLabel))
                        .addGap(36, 36, 36)
                        .addComponent(inStockCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ingredientsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitChangesButton)
                    .addComponent(deleteIngredientButton)
                    .addComponent(addNewIngredientButton))
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ingredientsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingredientsComboBoxActionPerformed
        System.out.println("picked");
    }//GEN-LAST:event_ingredientsComboBoxActionPerformed

    private void submitChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitChangesButtonActionPerformed
        if (submitChangesButton.getText().equals("Edit Ingredient")) {  // Change to "Submit Changes"
            submitChangesButton.setText("Submit Changes");
            deleteIngredientButton.setText("Cancel");
            addNewIngredientButton.setVisible(false);
            // Allow editing of input elements.
            inStockCheckBox.setEnabled(true);
            foodGroupTextField.setEditable(true);
            nutritionFactsTextArea.setEditable(true);

            ingredientNameLabel.setVisible(true);
            ingredientNameTextField.setVisible(true);
            // Place the selected ingredient's name into the text box.
            ingredientNameTextField.setText((String) ingredientsComboBox.getSelectedItem());
            ingredientsComboBox.setVisible(false);
        } else {  // Change to "Edit Ingredient"
            submitChangesButton.setText("Edit Ingredient");
            addNewIngredientButton.setVisible(true);
            // Prevent editing of ingredients.
            inStockCheckBox.setEnabled(false);
            foodGroupTextField.setEditable(false);
            nutritionFactsTextArea.setEditable(false);

            ingredientNameLabel.setVisible(false);
            ingredientNameTextField.setVisible(false);
            ingredientsComboBox.setVisible(true);
            // Place the selected ingredient's name into the text box.
            ingredientsComboBox.removeItemAt(ingredientsComboBox.getSelectedIndex());
            ingredientsComboBox.addItem(ingredientNameTextField.getText());
            deleteIngredientButton.setText("Delete Ingredient");
        }
    }//GEN-LAST:event_submitChangesButtonActionPerformed
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed

    }//GEN-LAST:event_formKeyPressed

    private void addNewIngredientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewIngredientButtonActionPerformed
        if (addNewIngredientButton.getText().equals("Add New Ingredient")) {  // User wants to add a new ingredient. Hide some elements.
            addNewIngredientButton.setText("Submit New Ingredient");

            ingredientsComboBox.setVisible(false);
            submitChangesButton.setVisible(false);
            deleteIngredientButton.setText("Cancel");
            nutritionFactsTextArea.setEditable(true);
            ingredientNameTextField.setVisible(true);
            ingredientNameLabel.setVisible(true);
            foodGroupTextField.setEditable(true);
            inStockCheckBox.setEnabled(true);
        } else {  // Do opposite of if condition. Add ingredient to screen and database.
            addNewIngredientButton.setText("Add New Ingredient");
            foodGroupTextField.setEditable(false);
            inStockCheckBox.setEnabled(false);
            ingredientsComboBox.setVisible(true);
            submitChangesButton.setVisible(true);
            deleteIngredientButton.setText("Delete Ingredient");
            nutritionFactsTextArea.setEditable(false);
            ingredientNameTextField.setVisible(false);
            ingredientNameLabel.setVisible(false);
            deleteIngredientButton.setVisible(true);
            submitChangesButton.setVisible(true);
        }
    }//GEN-LAST:event_addNewIngredientButtonActionPerformed

    private void deleteIngredientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteIngredientButtonActionPerformed
        submitChangesButton.setText("Edit Ingredient");
        if (deleteIngredientButton.getText().equals("Cancel")) {
            addNewIngredientButton.setVisible(true);
            // Was in adding a new ingredient mode. Go back to viewing ingredient mode.
            addNewIngredientButton.setText("Add New Ingredient");
            foodGroupTextField.setEditable(false);
            inStockCheckBox.setEnabled(false);
            ingredientsComboBox.setVisible(true);
            submitChangesButton.setVisible(true);
            deleteIngredientButton.setText("Delete Ingredient");
            nutritionFactsTextArea.setEditable(false);
            ingredientNameTextField.setVisible(false);
            ingredientNameLabel.setVisible(false);
        } else {  // Remove ingredient from screen and database.
            ingredientsComboBox.removeItemAt(ingredientsComboBox.getSelectedIndex());
            if (ingredientsComboBox.getItemCount() == 0) {  // NOthing to delete/edit.
                deleteIngredientButton.setVisible(false);
                submitChangesButton.setVisible(false);
            }
        }
    }//GEN-LAST:event_deleteIngredientButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewIngredientButton;
    private java.awt.Button button1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton deleteIngredientButton;
    private javax.swing.JTextField foodGroupTextField;
    private java.awt.Checkbox inStockCheckBox;
    private javax.swing.JLabel ingredientNameLabel;
    private javax.swing.JTextField ingredientNameTextField;
    private javax.swing.JComboBox<String> ingredientsComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea nutritionFactsTextArea;
    private javax.swing.JButton submitChangesButton;
    // End of variables declaration//GEN-END:variables

}
