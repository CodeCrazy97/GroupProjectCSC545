/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package groupproject545;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.sql.Connection;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Ethan_2
 */
public class RecipesGUI extends javax.swing.JPanel {

    Connection conn = null;
    Statement stmt = null;

    public List<Recipes> recipes = new ArrayList<Recipes>();
    public Recipes recipesClass = new Recipes();

    /**
     * Creates new form RecipesGUI
     */
    public RecipesGUI(JFrame frame) {
        initComponents();

        WindowListener exitListener = new WindowAdapter() {  // Create custom closing event.
            public void windowClosing(WindowEvent e) {
                // Show the meal plans form.
                JFrame welcomeScreen = new JFrame("Welcome");

                // Maximize the size of the jframe.
                //welcomeScreen.setExtendedState(JFrame.MAXIMIZED_BOTH);
                welcomeScreen.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  // Exits the program after the JFrame is closed by the user.
                welcomeScreen.add(new WelcomeScreenGUI());
                welcomeScreen.pack();
                welcomeScreen.setLocationRelativeTo(null);
                welcomeScreen.setVisible(true);
            }
        };

        frame.addWindowListener(exitListener);  // Add the custom designed listener.

        frame.add(this);  // Pass the current instance of the IngredientsGUI class to the frame.
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        // Get recipes, place them into the combo box. Also, place first recipe's info into the text fields.
        getRecipes();

        // Hide the adding a new ingredient components (until user wants to).
        changeEditingMode(false);
        removeIngredientButton.setVisible(false);  // Not editing, so hide this button.
    }

    private void changeEditingMode(boolean mode) {
        if (mode) {
            deleteRecipeButton.setText("Cancel");
        } else {
            deleteRecipeButton.setText("Delete Recipe");
        }
        recipeTitleLabel.setVisible(mode);
        recipeTitleTextField.setVisible(mode);
        unusedIngredientComboBox.setVisible(mode);
        newIngredientLabel.setVisible(mode);
        addNewIngredientButton.setVisible(mode);
        instructionsTextArea.setEditable(mode);
        recipeCategoryTextField.setEditable(mode);
        recipeTitleTextField.setEditable(mode);
        if (ingredientsComboBox.getItemCount() != 0) {  // allow user to remove ingredients from the list, if there are ingredients to be deleted
            removeIngredientButton.setVisible(true);
        }
        if (mode) {  // Fetch all ingredients not currently being used in the recipe, place them in the combo box.
            String recipeTitle = recipeTitleTextField.getText();
            List<String> unusedIngredients = recipesClass.getIngredientsNotUsedInRecipe(recipeTitle);
            unusedIngredientComboBox.removeAllItems();
            for (int i = 0; i < unusedIngredients.size(); i++) {
                unusedIngredientComboBox.addItem(unusedIngredients.get(i));
            }
        }
    }

    private void getRecipes() {
        recipes = recipesClass.getRecipes();
        for (int i = 0; i < recipes.size(); i++) {
            recipesComboBox.addItem(recipes.get(i).getTitle());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        recipesComboBox = new javax.swing.JComboBox<>();
        addNewRecipeButton = new javax.swing.JButton();
        deleteRecipeButton = new javax.swing.JButton();
        editRecipeButton = new javax.swing.JButton();
        recipeTitleTextField = new javax.swing.JTextField();
        recipeCategoryTextField = new javax.swing.JTextField();
        recipeTitleLabel = new javax.swing.JLabel();
        categoryLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        instructionsTextArea = new javax.swing.JTextArea();
        instructionsLabel = new javax.swing.JLabel();
        ingredientsComboBox = new javax.swing.JComboBox<>();
        ingredientsLabel = new javax.swing.JLabel();
        removeIngredientButton = new javax.swing.JButton();
        addNewIngredientButton = new javax.swing.JButton();
        unusedIngredientComboBox = new javax.swing.JComboBox<>();
        newIngredientLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        recipesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recipesComboBoxActionPerformed(evt);
            }
        });

        addNewRecipeButton.setText("Add New Recipe");
        addNewRecipeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewRecipeButtonActionPerformed(evt);
            }
        });

        deleteRecipeButton.setText("Delete Recipe");
        deleteRecipeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRecipeButtonActionPerformed(evt);
            }
        });

        editRecipeButton.setText("Edit Recipe");
        editRecipeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRecipeButtonActionPerformed(evt);
            }
        });

        recipeTitleLabel.setText("Recipe title:");

        categoryLabel.setText("Category:");

        instructionsTextArea.setColumns(20);
        instructionsTextArea.setRows(5);
        jScrollPane1.setViewportView(instructionsTextArea);

        instructionsLabel.setText("Instructions:");

        ingredientsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingredientsComboBoxActionPerformed(evt);
            }
        });

        ingredientsLabel.setText("Ingredients:");

        removeIngredientButton.setText("Remove Ingredient");
        removeIngredientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeIngredientButtonActionPerformed(evt);
            }
        });

        addNewIngredientButton.setText("Add New Ingredient");
        addNewIngredientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewIngredientButtonActionPerformed(evt);
            }
        });

        unusedIngredientComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        newIngredientLabel.setText("New Ingredient:");

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 13)); // NOI18N
        jLabel1.setText("Deleting recipes will");

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 13)); // NOI18N
        jLabel2.setText(" effect your meals!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(instructionsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addNewRecipeButton)
                        .addGap(31, 31, 31)
                        .addComponent(editRecipeButton)
                        .addGap(30, 30, 30)
                        .addComponent(deleteRecipeButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addNewIngredientButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(204, 237, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ingredientsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ingredientsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(removeIngredientButton)
                                .addGap(4, 4, 4))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(newIngredientLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(unusedIngredientComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(recipeTitleLabel)
                            .addComponent(categoryLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(recipeTitleTextField)
                                .addGap(4, 4, 4))
                            .addComponent(recipeCategoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addComponent(recipesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(123, 123, 123))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(recipesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recipeTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(recipeTitleLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recipeCategoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoryLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeIngredientButton)
                    .addComponent(ingredientsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ingredientsLabel))
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unusedIngredientComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newIngredientLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addNewIngredientButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(instructionsLabel))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addNewRecipeButton)
                    .addComponent(deleteRecipeButton)
                    .addComponent(editRecipeButton))
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(70, 70, 70))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void recipesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recipesComboBoxActionPerformed
        // New recipe has been selected. Load it's information.
        int pickedRecipe = recipesComboBox.getSelectedIndex();
        recipeTitleTextField.setText(recipes.get(pickedRecipe).getTitle());
        recipeCategoryTextField.setText(recipes.get(pickedRecipe).getCategory());
        instructionsTextArea.setText(recipes.get(pickedRecipe).getInstructions());

        // Populate the (used) ingredients combo box with ingredients that are used in this recipe.
        ingredientsComboBox.removeAllItems();  // Clear anything out of the ingredients combo box that was there from a previous recipe.
        List<String> ingredients = recipesClass.getIngredientsUsedInRecipe(recipes.get(pickedRecipe).getTitle());
        for (int i = 0; i < ingredients.size(); i++) {
            ingredientsComboBox.addItem(ingredients.get(i));
        }
    }//GEN-LAST:event_recipesComboBoxActionPerformed

    private boolean recipeIsNotEmpty(String recipeTitle) {
        if (recipeTitle == null || recipeTitle.equals("")) {
            return false;
        }
        return true;
    }

    private boolean recipeDoesNotAlreadyExist(boolean editingMode, String recipeTitle) {
        // Check if the recipe is already in the list.
        int selectedIngredient = recipesComboBox.getSelectedIndex();
        for (int i = 0; i < recipes.size(); i++) {
            if (editingMode && i == selectedIngredient) {  // Don't want this method throwing an error because user isn't changing the recipe's title (could be changing it's category facts, for example)
                continue;
            }
            if (recipes.get(i).getTitle().equals(recipeTitle)) {
                JOptionPane.showMessageDialog(this,
                        "The recipe already exists.",
                        "Recipe Not Added",
                        JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        // Passed all the checks - return true so the recipe can be submitted to the database.
        return true;
    }

    private void addNewRecipeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewRecipeButtonActionPerformed
        recipeTitleTextField.setText("");  // Set to empty before doing anything else (makes changeEditingMode operations easier)
        if (addNewRecipeButton.getText().equals("Add New Recipe")) {  // User wants to add a new ingredient. Hide some elements.

            addNewRecipeButton.setText("Submit New Recipe");

            // null out text in nutrition facts field and food group field.
            instructionsTextArea.setText("");
            recipeCategoryTextField.setText("");

            // Hide everything that relates to an old recipe
            removeIngredientButton.setVisible(false);
            ingredientsComboBox.setVisible(false);
            ingredientsLabel.setVisible(false);

            editRecipeButton.setVisible(false);
            recipesComboBox.setVisible(false);
            changeEditingMode(true);
        } else // Do opposite of if condition. Try to add ingredient to screen and database.
        {
            if (recipeIsNotEmpty(recipeTitleTextField.getText()) && recipeDoesNotAlreadyExist(false, recipeTitleTextField.getText())) {  // Before submitting changes to the database, validate the recipe (make sure it's title is not null and that there is not already an recipe with that name).            

                String title = recipeTitleTextField.getText();
                String instructions = instructionsTextArea.getText();
                String category = recipeCategoryTextField.getText();
                Recipes recipe = new Recipes(title, instructions, category);

                // Insert the item into the database.
                try {
                    String sqlInsertStmt = "insert into RECIPES values ('" + title + "', '" + instructions + "', '" + category + "')";

                    conn = ConnectDb.setupConnection();
                    stmt = conn.createStatement();
                    stmt.executeUpdate(sqlInsertStmt);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);  // Show the exception message.
                } finally {
                    try {  // Try closing the connection and the statement.
                        conn.close();
                        stmt.close();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e);  // Show the exception message.}
                    }
                }

                // Place new item in the list and combo box.
                recipes.add(0, recipe);
                recipesComboBox.insertItemAt(title, 0);

                recipesComboBox.setVisible(true);
                // Select the new item.
                recipesComboBox.setSelectedIndex(0);

                addNewRecipeButton.setText("Add New Recipe");
                changeEditingMode(false);
            }
        }
    }//GEN-LAST:event_addNewRecipeButtonActionPerformed

    private void deleteRecipeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRecipeButtonActionPerformed
        // There are two times when this button gets clicked: when the user wants
        // to delete a recipe or when a user wishes to cancel out of edit mode.
        if (deleteRecipeButton.getText().equals("Delete Recipe")) {
            // Remove the recipe from the screen and the database.

        } else {
            removeIngredientButton.setVisible(false);
            
            // Cancel out of edit mode. Select first recipe so the fields will populate with its data.
            changeEditingMode(false);  // Get out of edit mode.
            recipesComboBox.setVisible(true);

            ingredientsLabel.setVisible(true);
            ingredientsComboBox.setVisible(true);
            recipesComboBox.setSelectedIndex(0);

            // Reset the buttons' text.
            addNewRecipeButton.setVisible(true);
            addNewRecipeButton.setText("Add New Recipe");
            editRecipeButton.setText("Edit Recipe");
            editRecipeButton.setVisible(true);
        }
    }//GEN-LAST:event_deleteRecipeButtonActionPerformed

    private void editRecipeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRecipeButtonActionPerformed

        if (editRecipeButton.getText().equals("Edit Recipe")) {

            int pickedRecipe = recipesComboBox.getSelectedIndex();
            recipeTitleTextField.setText(recipes.get(pickedRecipe).getTitle());  // Place the title in the text field before calling changeEditMode

            // Populate with the instructions, category.            
            instructionsTextArea.setText(recipes.get(pickedRecipe).getInstructions());
            recipeCategoryTextField.setText(recipes.get(pickedRecipe).getCategory());

            recipesComboBox.setVisible(false);
            editRecipeButton.setText("Submit Changes");
            changeEditingMode(true);

            addNewRecipeButton.setVisible(false);
        } else if (recipeIsNotEmpty(recipeTitleTextField.getText()) && recipeDoesNotAlreadyExist(true, recipeTitleTextField.getText())) {  // Make sure the recipe does not already exist in the database.

        }
    }//GEN-LAST:event_editRecipeButtonActionPerformed

    private void addNewIngredientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewIngredientButtonActionPerformed
        if (!ingredientsComboBox.isVisible()) {  // Time to unhide this combo box (something is about to be added to it)
            ingredientsComboBox.setVisible(true);
            ingredientsLabel.setVisible(true);
            removeIngredientButton.setVisible(true);
        }
        String unusedIngredient = unusedIngredientComboBox.getSelectedItem().toString();
        unusedIngredientComboBox.removeItemAt(unusedIngredientComboBox.getSelectedIndex());
        ingredientsComboBox.addItem(unusedIngredient);
        if (unusedIngredientComboBox.getItemCount() == 0) {  // If deleting this unusedingredient from the unused ingredients list resulted in an empty combo box, then hide the relevant guis.
            unusedIngredientComboBox.setVisible(false);
            addNewIngredientButton.setVisible(false);
            newIngredientLabel.setVisible(false);
        }
    }//GEN-LAST:event_addNewIngredientButtonActionPerformed

    private void ingredientsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingredientsComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ingredientsComboBoxActionPerformed

    private void removeIngredientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeIngredientButtonActionPerformed
        if (!unusedIngredientComboBox.isVisible()) {  // Time to unhide this combo box (something is about to be added to it)
            unusedIngredientComboBox.setVisible(true);
            newIngredientLabel.setVisible(true);
            addNewIngredientButton.setVisible(true);
        }
        String oldIngredient = ingredientsComboBox.getSelectedItem().toString();
        ingredientsComboBox.removeItemAt(ingredientsComboBox.getSelectedIndex());
        unusedIngredientComboBox.addItem(oldIngredient);
        if (ingredientsComboBox.getItemCount() == 0) {  // If deleting this unusedingredient from the unused ingredients list resulted in an empty combo box, then hide the relevant guis.
            ingredientsComboBox.setVisible(false);
            removeIngredientButton.setVisible(false);
            ingredientsLabel.setVisible(false);
        }
    }//GEN-LAST:event_removeIngredientButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewIngredientButton;
    private javax.swing.JButton addNewRecipeButton;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JButton deleteRecipeButton;
    private javax.swing.JButton editRecipeButton;
    private javax.swing.JComboBox<String> ingredientsComboBox;
    private javax.swing.JLabel ingredientsLabel;
    private javax.swing.JLabel instructionsLabel;
    private javax.swing.JTextArea instructionsTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel newIngredientLabel;
    private javax.swing.JTextField recipeCategoryTextField;
    private javax.swing.JLabel recipeTitleLabel;
    private javax.swing.JTextField recipeTitleTextField;
    private javax.swing.JComboBox<String> recipesComboBox;
    private javax.swing.JButton removeIngredientButton;
    private javax.swing.JComboBox<String> unusedIngredientComboBox;
    // End of variables declaration//GEN-END:variables
}
